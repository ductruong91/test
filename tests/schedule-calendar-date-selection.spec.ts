import { test, expect } from "@playwright/test";
import { login } from "./helpers/auth";
import { testPatient } from "./helpers/testData";
import {
  findScheduleElement,
  verifyScheduleElement,
  ScheduleInfo,
  findSimpleScheduleElement,
} from "./helpers/scheduleHelpers";
import { calculateAppointmentDates } from "./helpers/frequencyHelper";

test("check t·∫•t c·∫£ c√°c ng√†y theo chu k√¨ kh√°m", async ({ page }) => {
  // TƒÉng timeout cho ri√™ng test n√†y l√™n 40 gi√¢y
  test.setTimeout(40000);

  await login(page);
  await page.locator(".flex.aspect-square").click();
  await page
    .getByRole("navigation")
    .locator("div")
    .filter({ hasText: "„Çπ„Ç±„Ç∏„É•„Éº„É´ÁÆ°ÁêÜ" })
    .click();
  await page.getByRole("link", { name: "„Ç∑„Éï„ÉàË°®ÔºàÊó•Ë°®Á§∫Ôºâ" }).click();

  const {
    servicePlanYear,
    servicePlanMonth,
    servicePlanDate,
    servicePlanFrequency,
    staffName,
    servicePlanHour,
    servicePlanMinute,
    servicePlanDuration,
    firstName,
    lastName,
    firstNameKana,
    lastNameKana,
  } = testPatient;

  const customerName = `${lastName} ${firstName}`;

  // S·ª≠ d·ª•ng h√†m calculateAppointmentDates ƒë·ªÉ l·∫•y danh s√°ch ng√†y c·∫ßn ki·ªÉm tra
  const dates = calculateAppointmentDates(
    servicePlanFrequency,
    servicePlanYear,
    servicePlanMonth,
    Number(servicePlanDate),
    3 // 3 th√°ng
  );

  console.log(
    `üìÖ Generated ${dates.length} appointment dates for frequency: "${servicePlanFrequency}"`
  );

  let currentMonth = servicePlanMonth;
  let currentYear = servicePlanYear;

  //check schedule element in all dates
  for (const d of dates) {
    // Show all dates
    const weekDaysJP = ["Êó•", "Êúà", "ÁÅ´", "Ê∞¥", "Êú®", "Èáë", "Âúü"];
    const dayOfWeek = weekDaysJP[d.getDay()];
    const weekPosition = Math.ceil(d.getDate() / 7);
    console.log(
      ` ${d.toLocaleDateString()} (${dayOfWeek}) - Week ${weekPosition}`
    );

    await page.locator("#layout-header-filter div").nth(1).click();
    // N·∫øu sang th√°ng m·ªõi th√¨ chuy·ªÉn th√°ng
    if (d.getMonth() + 1 !== currentMonth || d.getFullYear() !== currentYear) {
      const monthStr = `${d.getFullYear()}Âπ¥${d
        .getMonth()
        .toString()
        .padStart(2, "0")}Êúà`;
      await page
        .locator("div")
        .filter({ hasText: new RegExp(`^${monthStr}$`) })
        .getByRole("button")
        .nth(1)
        .click();
      currentMonth = d.getMonth() + 1;
      currentYear = d.getFullYear();
    }
    console.log(d.getDate().toString());
    const dayLocators = page.getByText(d.getDate().toString(), { exact: true });
    const count = await dayLocators.count();
    if (count === 2 && d.getDate() > 15) {
      await dayLocators.nth(1).click();
    } else {
      await dayLocators.first().click();
    }

    // Ch·ªù cho b·∫£ng l·ªãch c·ªßa ng√†y ƒë∆∞·ª£c ch·ªçn t·∫£i xong
    await page.waitForLoadState("networkidle");
    // Thay v√¨ ch·ªù c·ªë ƒë·ªãnh, ch√∫ng ta s·∫Ω ch·ªù cho m·ªôt ph·∫ßn t·ª≠ ch√≠nh c·ªßa b·∫£ng l·ªãch (c·ªôt c·ªßa nh√¢n vi√™n) hi·ªÉn th·ªã.
    // ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o r·∫±ng DOM ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr∆∞·ªõc khi ch√∫ng ta t√¨m ki·∫øm.
    await expect(
      page.locator("div", { hasText: staffName }).first()
    ).toBeVisible();
    await page.waitForTimeout(1000);

    const scheduleElement = await findSimpleScheduleElement(
      page,
      servicePlanHour,
      servicePlanMinute,
      staffName,
      servicePlanDuration
    );

    if (scheduleElement) {
      const lastElement = scheduleElement.last();
      console.log("‚úÖ Schedule element found. Clicking the last one...");
      await expect(lastElement).toBeVisible();
      await lastElement.click();

      // --- X√°c th·ª±c th√¥ng tin tr√™n Modal ---
      console.log("Verifying form information...");
      const modal = page
        .locator("div:visible")
        .filter({ hasText: customerName })
        .last();
      await expect(modal).toBeVisible({ timeout: 10000 });
      console.log("‚úÖ Modal form is visible.");

      const weekDaysJP = ["Êó•", "Êúà", "ÁÅ´", "Ê∞¥", "Êú®", "Èáë", "Âúü"];
      const dayOfWeek = weekDaysJP[d.getDay()];
      const expectedDate = `${String(d.getMonth() + 1).padStart(
        2,
        "0"
      )}Êúà${String(d.getDate()).padStart(2, "0")}Êó•(${dayOfWeek})`;
      const expectedDateRegex = expectedDate
        .replace("(", "\\(")
        .replace(")", "\\)");

      const startTime = `${parseInt(servicePlanHour, 10)}:${servicePlanMinute}`;

      // --- T√≠nh to√°n End Time th·ªß c√¥ng ƒë·ªÉ tr√°nh l·ªói t·ª´ Date object ---
      const startHourNum = parseInt(servicePlanHour, 10);
      const startMinuteNum = parseInt(servicePlanMinute, 10);
      const durationMinutes = parseInt(
        servicePlanDuration.match(/(\\d+)/)?.[1] || "0",
        10
      );
      const endMinuteNum = (startMinuteNum + durationMinutes) % 60;
      const endHourNum =
        startHourNum + Math.floor((startMinuteNum + durationMinutes) / 60);
      const endTime = `${endHourNum}:${String(endMinuteNum).padStart(2, "0")}`;
      const expectedTimeRange = `${startTime}„Äú${endTime}`;

      // await expect(modal.getByText(staffName)).toBeVisible();
      await expect(
        modal.getByText(
          new RegExp(
            `${expectedDateRegex}\\s+-\\s+${startTime}„Äú\\d{1,2}:\\d{2}`
          )
        )
      ).toBeVisible();

      console.log("üéâ Information verified successfully for this date!");

      // --- ƒê√≥ng modal ---
      console.log("Closing modal...");
      await page
        .locator("div")
        .filter({ hasText: new RegExp(`^${staffName}„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´$`) })
        .getByRole("button")
        .nth(3)
        .click();
      // await expect(modal).not.toBeVisible();
      console.log("Modal closed.");
    } else {
      console.log(
        `‚ùå Schedule element not found for date: ${d.toLocaleDateString()}`
      );
      // N·∫øu l·ªãch kh√°m lu√¥n ph·∫£i t·ªìn t·∫°i, b·∫°n c√≥ th·ªÉ b·ªè comment d√≤ng sau ƒë·ªÉ test b√°o l·ªói
      // expect(scheduleElement).not.toBeNull();
    }
  }
});
