import { Page } from "@playwright/test";
import { captureRejectionSymbol } from "events";

// H√†m helper ƒë·ªÉ verify table data - c√≥ th·ªÉ s·ª≠ d·ª•ng t·ª´ file kh√°c
export async function verifyTableDataForPatient(page: Page, patientData: any) {
  // L·∫•y th√¥ng tin t·ª´ patientData
  const firstName = patientData.firstName;
  const lastName = patientData.lastName;
  const firstNameKana = patientData.firstNameKana;
  const lastNameKana = patientData.lastNameKana;
  const address = patientData.address;
  const staffName = patientData.staffName;
  const serviceCode = patientData.serviceCode;
  const servicePlanFrequency = patientData.servicePlanFrequency;
  const servicePlanYear = patientData.servicePlanYear;
  const servicePlanMonth = patientData.servicePlanMonth;
  const servicePlanDate = patientData.servicePlanDate;
  const servicePlanHour = patientData.servicePlanHour;
  const servicePlanMinute = patientData.servicePlanMinute;
  const servicePlanDuration = patientData.servicePlanDuration;
  const gender = patientData.gender;
  const serviceType = patientData.serviceType;
  const insuranceType = patientData.insuranceType;

  // T√≠nh to√°n ng√†y th·ª© trong tu·∫ßn
  const weekDaysJP = ["Êó•", "Êúà", "ÁÅ´", "Ê∞¥", "Êú®", "Èáë", "Âúü"];
  const planDateObj = new Date(
    servicePlanYear,
    servicePlanMonth - 1,
    Number(servicePlanDate)
  );
  const dayOfWeek = weekDaysJP[planDateObj.getDay()];
  const startTime = `${servicePlanHour}:${servicePlanMinute}`;

  // T√¨m v√† ch·ªçn b·ªánh nh√¢n trong b·∫£ng
  // await page
  //   .locator("#layout-header-filter")
  //   .getByRole("button")
  //   .nth(1)
  //   .click();
  await page
    .locator(
      ".flex.items-center.gap-\\[8px\\].max-sm\\:gap-\\[4px\\] > div:nth-child(3) > .rounded"
    )
    .click();

  await page
    .locator("div")
    .filter({ hasText: new RegExp(`^${firstName} ${lastName}$`) })
    .nth(1)
    .click();

  // L·∫•y th√¥ng tin d√≤ng ch·ª©a t√™n b·ªánh nh√¢n theo ƒë√∫ng data
  const patientRow = page.locator("tr", {
    hasText: `${firstName} ${lastName}`,
  });

  // L·∫•y s·ªë c·ªôt c·ªßa patientRow
  const allCells = patientRow.locator(".px-\\[7px\\].py-\\[8px\\]");
  const cellCount = await allCells.count();
  // console.log("üìä S·ªë c·ªôt trong patientRow:", cellCount);
  let currentRow = patientRow;

  do {
    const nextRow = currentRow.locator("xpath=following-sibling::tr[1]");

    const allCellsNextRow = nextRow.locator(".px-\\[7px\\].py-\\[8px\\]");
    const cellCountNextRow = await allCellsNextRow.count();
    if (cellCountNextRow === 0 || cellCountNextRow === cellCount) {
      break;
    } else currentRow = nextRow;
  } while (true);

  // L∆∞u th√¥ng tin t·ª´ng c·ªôt c·ªßa d√≤ng th√¥ng tin ƒë·∫ßu ti√™n n√†y v√†o bi·∫øn va in ra
  const firstRowData: string[] = []; //d√≤ng ƒë·∫ßu ti√™n trong b·∫£ng show ra khi l·ªçc
  const currentRowData: string[] = []; //d√≤ng cu·ªëi c√πng trong b·∫£ng show ra khi l·ªçc (khong bao g·ªìm 5 c·ªôt ƒë·∫ßu do b·ªã rowspan)
  // In th√¥ng tin t·ª´ng c·ªôt c·ªßa firstRowData

  for (let col = 0; col < 13; col++) {
    const cell = patientRow.locator(".px-\\[7px\\].py-\\[8px\\]").nth(col);
    const text = await cell.textContent();
    const cellText = text?.trim() || "";
    firstRowData.push(cellText);
    // console.log(`  C·ªôt ${col + 1}: "${cellText}"`);
  }
  // console.log(firstRowData);

  // In th√¥ng tin t·ª´ng c·ªôt c·ªßa nextRowData
  // console.log(`nextRowData`);
  for (let col = 0; col < 13; col++) {
    const cell = currentRow.locator(".px-\\[7px\\].py-\\[8px\\]").nth(col);
    const text = await cell.textContent();
    const cellText = text?.trim() || "";
    currentRowData.push(cellText);
    // console.log(`  C·ªôt ${col + 1}: "${cellText}"`);
  }
  let data: string[] = [];
  console.log(`firstRowData`, firstRowData);
  console.log("currentRowData", currentRowData);
  if (JSON.stringify(firstRowData) === JSON.stringify(currentRowData)) {
    firstRowData.splice(4, 1);
    data = firstRowData;
  } else {
    data = [...firstRowData.slice(0, 4), ...currentRowData.slice(0, 8)];
  }
  // const data = [...firstRowData.slice(0, 4), ...currentRowData.slice(0, 8)];
  console.log("data lay duoc tren man hinh hien thi:", data);

  // Ki·ªÉm tra so s√°nh data ƒë·∫ßu v√†o vs data ƒë·∫ßu ra
  console.log("\nüîç SO S√ÅNH DATA ƒê·∫¶U V√ÄO VS DATA ƒê·∫¶U RA:");

  // T·∫°o m·∫£ng expected data t·ª´ test data
  const expectedData = [
    `${firstName} ${lastName}`, // C·ªôt 1: T√™n b·ªánh nh√¢n
    `${firstNameKana} ${lastNameKana}`, // C·ªôt 2: T√™n Kana
    gender, // C·ªôt 3: Gi·ªõi t√≠nh
    address, // C·ªôt 4: ƒê·ªãa ch·ªâ
    serviceType, // C·ªôt 5: Lo·∫°i d·ªãch v·ª•
    serviceCode, // C·ªôt 6: M√£ d·ªãch v·ª•
    insuranceType, // C·ªôt 7: Lo·∫°i b·∫£o hi·ªÉm
    servicePlanFrequency, // C·ªôt 8: T·∫ßn su·∫•t
    dayOfWeek, // C·ªôt 9: Th·ª©
    startTime, // C·ªôt 10: Th·ªùi gian b·∫Øt ƒë·∫ßu
    servicePlanDuration, // C·ªôt 11: Kho·∫£ng th·ªùi gian
    staffName, // C·ªôt 12: Nh√¢n vi√™n
    "", // C·ªôt 13: (c√≥ th·ªÉ tr·ªëng)
  ];

  console.log("üìã Expected Data:", expectedData);
  console.log("üìã Actual Data:", data);

  // So s√°nh t·ª´ng c·ªôt
  const columnNames = [
    "T√™n b·ªánh nh√¢n",
    "T√™n Kana",
    "Gi·ªõi t√≠nh",
    "ƒê·ªãa ch·ªâ",
    "Lo·∫°i d·ªãch v·ª•",
    "M√£ d·ªãch v·ª•",
    "Lo·∫°i b·∫£o hi·ªÉm",
    "T·∫ßn su·∫•t",
    "Th·ª©",
    "Th·ªùi gian b·∫Øt ƒë·∫ßu",
    "Kho·∫£ng th·ªùi gian",
    "Nh√¢n vi√™n",
    "C·ªôt 13",
  ];

  let matchCount = 0;
  const minLength = Math.min(expectedData.length, data.length);

  for (let i = 0; i < minLength; i++) {
    const expected = expectedData[i];
    const actual = data[i];
    const isMatch = expected === actual;

    if (isMatch) {
      matchCount++;
      console.log(`‚úÖ C·ªôt ${i + 1} (${columnNames[i]}): "${expected}" ‚úì`);
    } else {
      console.log(
        `‚ùå C·ªôt ${i + 1} (${
          columnNames[i]
        }): Expected "${expected}", Actual "${actual}" ‚úó`
      );
    }
  }

  console.log(`\nüìä K·∫øt qu·∫£: ${matchCount}/${minLength} c·ªôt kh·ªõp`);

  if (matchCount === minLength) {
    console.log("üéâ T·∫•t c·∫£ d·ªØ li·ªáu kh·ªõp ho√†n to√†n!");
  } else {
    console.log("‚ö†Ô∏è C√≥ s·ª± kh√°c bi·ªát trong d·ªØ li·ªáu!");
  }

  console.log("üéâ Ho√†n th√†nh ki·ªÉm tra t·∫•t c·∫£ th√¥ng tin trong d√≤ng!");

  return { matchCount, minLength, data, expectedData };
}
